cmake_minimum_required(VERSION 2.8.3)
project(sdsmt_slam)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
#find_package(catkin REQUIRED COMPONENTS rosconsole roscpp)

find_package(catkin REQUIRED COMPONENTS rosconsole roscpp)

## System dependencies are found with CMake's conventions
#find_package(REQUIRED COMPONENTS system)
#find_package(system)
#find_package(REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs  # Or other packages containing msgs
# )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES sdsmt_slam
#  CATKIN_DEPENDS other_catkin_pkg
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(src)


## Declare a C++ library
# add_library(sdsmt_slam
#   src/${PROJECT_NAME}/sdsmt_slam.cpp
# )

## Declare a C++ library
add_library(sdsmt_slam
  src/sensormodel.cc src/motionmodel.cc src/map.cc src/mapcellset.cc src/transmodel.cc
)

#set_target_properties(sdsmt_slam PROPERTIES COMPILE_FLAGS "-g -Wall -Werror")

#set_target_properties(sdsmt_slam PROPERTIES COMPILE_FLAGS "-O2 -g -Wall")
#set_target_properties(sdsmt_slam PROPERTIES LINK_FLAGS "-O2 -g")

set_target_properties(sdsmt_slam PROPERTIES COMPILE_FLAGS "-g -O2 -ofast -olto -Wall")
set_target_properties(sdsmt_slam PROPERTIES LINK_FLAGS "-g -O2 -ofast -olto")


## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(sdsmt_slam ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
#add_executable(sdsmt_slam_node src/sdsmt_slam_node.cpp)

add_executable(${PROJECT_NAME}-testsensormodel src/testsensormodel.cc)
add_dependencies(${PROJECT_NAME}-testsensormodel ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
target_link_libraries(${PROJECT_NAME}-testsensormodel
  ${catkin_LIBRARIES} sdsmt_slam -lpng -lgsl
  )

add_executable(${PROJECT_NAME}-testmotionmodel src/testmotionmodel.cc)
add_dependencies(${PROJECT_NAME}-testmotionmodel ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
target_link_libraries(${PROJECT_NAME}-testmotionmodel
  ${catkin_LIBRARIES} sdsmt_slam -lpng -lgsl
  )
set_target_properties(sdsmt_slam-testmotionmodel PROPERTIES COMPILE_FLAGS "-g -Wall")
set_target_properties(sdsmt_slam-testmotionmodel PROPERTIES LINK_FLAGS "-g")

add_executable(${PROJECT_NAME}-testsamplemotionmodel src/testsamplemotionmodel.cc)
add_dependencies(${PROJECT_NAME}-testsamplemotionmodel ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
target_link_libraries(${PROJECT_NAME}-testsamplemotionmodel
  ${catkin_LIBRARIES} sdsmt_slam -lpng -lgsl
  )
set_target_properties(sdsmt_slam-testsamplemotionmodel PROPERTIES COMPILE_FLAGS "-g -Wall")
set_target_properties(sdsmt_slam-testsamplemotionmodel PROPERTIES LINK_FLAGS "-g")

add_executable(${PROJECT_NAME}-buildtransfunc src/buildtransfunc.cc)
add_dependencies(${PROJECT_NAME}-buildtransfunc ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
target_link_libraries(${PROJECT_NAME}-buildtransfunc
  ${catkin_LIBRARIES} sdsmt_slam -lpng -lgsl
  )
set_target_properties(sdsmt_slam-buildtransfunc PROPERTIES COMPILE_FLAGS "-g -Wall")
set_target_properties(sdsmt_slam-buildtransfunc PROPERTIES LINK_FLAGS "-g")

add_executable(${PROJECT_NAME}-dumptransfunc src/dumptransfunc.cc)
add_dependencies(${PROJECT_NAME}-dumptransfunc ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
target_link_libraries(${PROJECT_NAME}-dumptransfunc
  ${catkin_LIBRARIES} sdsmt_slam -lpng -lgsl
  )
set_target_properties(sdsmt_slam-dumptransfunc PROPERTIES COMPILE_FLAGS "-g -Wall")
set_target_properties(sdsmt_slam-dumptransfunc PROPERTIES LINK_FLAGS "-g")


add_executable(${PROJECT_NAME}-planner src/planner.cc)
add_dependencies(${PROJECT_NAME}-planner ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
target_link_libraries(${PROJECT_NAME}-planner
  ${catkin_LIBRARIES} sdsmt_slam -lpng -lgsl
  )
set_target_properties(sdsmt_slam-planner PROPERTIES COMPILE_FLAGS "-g -Wall")
set_target_properties(sdsmt_slam-planner PROPERTIES LINK_FLAGS "-g")


add_executable(${PROJECT_NAME}-localize src/localize.cc)
add_dependencies(${PROJECT_NAME}-localize ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
target_link_libraries(${PROJECT_NAME}-localize
  ${catkin_LIBRARIES} sdsmt_slam -lpng -lgsl
  )

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(sdsmt_slam_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(sdsmt_slam_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS sdsmt_slam sdsmt_slam_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
install(TARGETS sdsmt_slam ${PROJECT_NAME}-testsensormodel 
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  #RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
    RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
 )
#install(TARGETS ${PROJECT_NAME}-testsensormodel
#${PROJECT_NAME}-testsensormodel DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_sdsmt_slam.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

# catkin_add_gtest(${PROJECT_NAME}-testsensormodel src/testsensormodel.cc src/map.cc src/sensormodel.cc)
# if(TARGET ${PROJECT_NAME}-testsensormodel)
#   target_link_libraries(${PROJECT_NAME}-testsensormodel ${PROJECT_NAME})
# endif()

# catkin_add_gtest(${PROJECT_NAME}-testmotionmodel src/testmotionmodel.cc)
# if(TARGET ${PROJECT_NAME}-testmotionmodel)
#   target_link_libraries(${PROJECT_NAME}-testmotionmodel ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
